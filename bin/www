#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../src/server');
const debug = require('debug')('express:server');
const http = require('http');
const colors = require('colors/safe');

/**
 * Args!
 */

const program = require('commander');

var input, output;
const version = require('../package.json').version;

program
    .version(version)
    .usage('<input> [output] [options]')
    .arguments('<input> [output] [options]')
    // .option('--no-sandbox', 'disable puppeteer sandboxing')
    .option('--basedir <location>', 'Base directory for report source folders')
    .action(function (inp, out) {
      input = inp
      output = out
    });

program.parse(process.argv);

if (program.basedir) {
  app.set('basedir', program.basedir)
} else {
  console.error(colors.red('\'--basedir\' must be provided'));
  program.outputHelp((txt) => colors.red(txt));
  process.exit(1)
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
